型なしラムダ計算の単純な処理系です。
Visual Studioのソリューションになってます。
ラムダ式をパースして最外最左(たぶん)簡約します。
速度は遅いし、スタックを食います。(おっきいのはむりだよぉ＞＜)

パースする構文はだいたい以下の様な感じ(正確には実装(LambdaParserクラス)参照)。
・識別子
	英数とアンダースコアの文字列(先頭文字は数字以外)
・ラムダ抽象
	"λ" 仮引数 "." ラムダ式
	"λ"は"^"でも大丈夫。
	 ("\"がいい!って人はOr追加するなりして適当にパーサ変更してください。
	  "lambda"ガーって人は識別子が被らないようにKeyWordにも追加しておくとたぶん行けます。)
	仮引数は識別子、ラムダ式は取れるだけ長くとる。
	仮引数は識別子を複数並べることもできる(間に空白を挟んで分離)。
	λx y.Mはλx.(λy.M)と認識される(カリー化)。
・関数適用
	ラムダ式 " " ラムダ式
	間には空白が必要。
	()によってまとめられている場合でも空白は省略できない。
	(λx.x x)(λx.x x)は不可、(λx.x x) (λx.x x)は可。
	L M N のような構文もできる。
	(L M) N と認識される。
・let式
	"let" 識別子 "=" ラムダ式 "in" ラムダ式
	変数束縛を表します。
	let x=M in N は (λx.N) M の糖衣構文です。
・数値リテラル
	数値はその数値に対応するチャーチ数になります。

パーサについて
PEG(Parsing Expression Grammar)的に書けるパーサコンビネータです。
モナドの糖衣構文であるクエリ式を活用して気持ち悪くパーサが書けます。
入力がcharのリストであることすら要求しないので文字列以外でもパースできますが遅いので実用性はありません。
Dataプロジェクトの色々に依存してます。